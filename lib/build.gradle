apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "21.0.6113669"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 3 // This number just needs to increase monotonically after every version change
        versionName "2.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        consumerProguardFiles 'consumer-rules.pro'

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // This is so we build the JNI wrapper
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // So we can use Android framework code in unit tests
    testOptions {
        unitTests.includeAndroidResources = true
    }
}

repositories {
    // Needed for FTCLib
    jcenter()

    maven {
        url "https://maven.0x778.tk"
    }
}

configurations {
    downloadHeader
    downloadSo
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.arcrobotics:ftclib:1.0.1' // For geometry classes

    testImplementation 'junit:junit:4.12'

    // So we can use Android framework code in unit tests
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'

    def rsVersion = '2.34.0-ftc265' // Change string to bump version
    downloadSo 'com.intel.realsense:librealsense:' + rsVersion + '@aar'
    implementation 'com.intel.realsense:librealsense:' + rsVersion + '@aar'
    downloadHeader 'com.intel.realsense:librealsense:' + rsVersion + '@zip'
}

task extractHeaders(type: Sync) {
    dependsOn configurations.downloadHeader
    from { configurations.downloadHeader.collect { zipTree(it) } }
    into "$projectDir/src/main/cpp/include"
}


task extractSo(type: Sync) {
    dependsOn configurations.downloadSo
    from { configurations.downloadSo.collect { zipTree(it) } }
    include("jni/**")
    into "$buildDir/"
}

preBuild.dependsOn(extractHeaders)
preBuild.dependsOn(extractSo)

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                groupId = "com.spartronics4915.lib"
                artifactId "ftc265"
                version = android.defaultConfig.versionName
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (it.name == "librealsense") {
                                // There's no way to programmatically get the dependency classifier so we just check the name
                                // This is important because otherwise Gradle will try to resolve this dep as a jar
                                dependencyNode.appendNode('type', 'aar')
                            }
                        }
                    }
                }
            }
        }
    }
}
